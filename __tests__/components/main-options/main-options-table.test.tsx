// Tests para MainOptionsTable
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import { useRouter } from 'next/navigation';
import { MainOptionsTable } from '@/components/main-options/main-options-table';
import { MainOption } from '@/types/main-option';


// Mock de next/navigation
jest.mock('next/navigation', () => ({
  useRouter: jest.fn(),
}));
const mockUseRouter = useRouter as jest.MockedFunction<typeof useRouter>;

describe('MainOptionsTable', () => {
  const mockPush = jest.fn();
  const mockOnDelete = jest.fn();

  const mockMainOptions: MainOption[] = [
    {
      id: 'main-option-1',
      name: 'Relajaci√≥n',
      description: 'Opciones para relajaci√≥n y alivio del estr√©s',
      emoji: 'üßò‚Äç‚ôÄÔ∏è',
      createdAt: '2023-01-01T00:00:00Z',
      updatedAt: '2023-01-01T00:00:00Z',
    },
    {
      id: 'main-option-2',
      name: 'Energ√≠a',
      description: 'Opciones para aumentar la energ√≠a',
      emoji: '‚ö°',
      createdAt: '2023-01-02T00:00:00Z',
      updatedAt: '2023-01-02T00:00:00Z',
    },
    {
      id: 'main-option-3',
      name: 'Concentraci√≥n',
      emoji: 'üéØ',
      createdAt: '2023-01-03T00:00:00Z',
      updatedAt: '2023-01-03T00:00:00Z',
    },
  ];

  beforeEach(() => {
    jest.clearAllMocks();
    mockUseRouter.mockReturnValue({
      push: mockPush,
    } as any);
  });

  it('renderiza la tabla con opciones principales correctamente (happy path)', () => {
    render(
      <MainOptionsTable 
        mainOptions={mockMainOptions} 
        onDelete={mockOnDelete} 
      />
    );

    // Verificar encabezados de tabla
    expect(screen.getByText('Nombre')).toBeInTheDocument();
    expect(screen.getByText('Descripci√≥n')).toBeInTheDocument();
    expect(screen.getByText('Emoji')).toBeInTheDocument();
    expect(screen.getByText('Fecha de Creaci√≥n')).toBeInTheDocument();
    expect(screen.getByText('Acciones')).toBeInTheDocument();

    // Verificar datos de las opciones principales
    expect(screen.getByText('Relajaci√≥n')).toBeInTheDocument();
    expect(screen.getByText('Opciones para relajaci√≥n y alivio del estr√©s')).toBeInTheDocument();
    expect(screen.getByText('üßò‚Äç‚ôÄÔ∏è')).toBeInTheDocument();
    expect(screen.getByText('1/1/2023')).toBeInTheDocument();

    expect(screen.getByText('Energ√≠a')).toBeInTheDocument();
    expect(screen.getByText('Opciones para aumentar la energ√≠a')).toBeInTheDocument();
    expect(screen.getByText('‚ö°')).toBeInTheDocument();

    expect(screen.getByText('Concentraci√≥n')).toBeInTheDocument();
    expect(screen.getByText('üéØ')).toBeInTheDocument();
  });

  it('muestra mensaje cuando no hay opciones principales', () => {
    render(
      <MainOptionsTable 
        mainOptions={[]} 
        onDelete={mockOnDelete} 
      />
    );

    expect(screen.getByText('No hay categor√≠as disponibles')).toBeInTheDocument();
  });

  it('muestra "Sin descripci√≥n" para opciones sin descripci√≥n', () => {
    render(
      <MainOptionsTable 
        mainOptions={mockMainOptions} 
        onDelete={mockOnDelete} 
      />
    );

    expect(screen.getByText('Sin descripci√≥n')).toBeInTheDocument();
  });

  it('maneja fechas inv√°lidas correctamente', () => {
    const optionsWithInvalidDate: MainOption[] = [
      {
        id: 'option-invalid',
        name: 'Opci√≥n sin fecha',
        description: 'Descripci√≥n de prueba',
        emoji: '‚ùì',
      },
    ];

    render(
      <MainOptionsTable 
        mainOptions={optionsWithInvalidDate} 
        onDelete={mockOnDelete} 
      />
    );

    expect(screen.getByText('Fecha no disponible')).toBeInTheDocument();
  });

  it('navega a la p√°gina de detalles al hacer click en el bot√≥n de ver', () => {
    render(
      <MainOptionsTable 
        mainOptions={mockMainOptions} 
        onDelete={mockOnDelete} 
      />
    );

    const viewButtons = screen.getAllByTitle('Ver detalles');
    fireEvent.click(viewButtons[0]);

    expect(mockPush).toHaveBeenCalledWith('/admin/management/main-options/main-option-1');
  });

  it('navega a la p√°gina de edici√≥n al hacer click en el bot√≥n de editar', () => {
    render(
      <MainOptionsTable 
        mainOptions={mockMainOptions} 
        onDelete={mockOnDelete} 
      />
    );

    const editButtons = screen.getAllByTitle('Editar');
    fireEvent.click(editButtons[0]);

    expect(mockPush).toHaveBeenCalledWith('/admin/management/main-options/main-option-1/edit');
  });

  it('abre el di√°logo de confirmaci√≥n al hacer click en eliminar', () => {
    render(
      <MainOptionsTable 
        mainOptions={mockMainOptions} 
        onDelete={mockOnDelete} 
      />
    );

    const deleteButtons = screen.getAllByTitle('Eliminar');
    fireEvent.click(deleteButtons[0]);

    expect(screen.getByText(/¬øest√°s seguro\?/i)).toBeInTheDocument();
    expect(screen.getByText(/esta acci√≥n no se puede deshacer/i)).toBeInTheDocument();
    expect(screen.getByText(/se eliminar√° permanentemente la opci√≥n principal "relajaci√≥n"/i)).toBeInTheDocument();
  });

  it('cierra el di√°logo de eliminaci√≥n al hacer click en cancelar', async () => {
    render(
      <MainOptionsTable 
        mainOptions={mockMainOptions} 
        onDelete={mockOnDelete} 
      />
    );

    // Abrir di√°logo
    const deleteButtons = screen.getAllByTitle('Eliminar');
    fireEvent.click(deleteButtons[0]);
    
    expect(screen.getByText(/¬øest√°s seguro\?/i)).toBeInTheDocument();

    // Cancelar
    fireEvent.click(screen.getByText(/cancelar/i));

    // El di√°logo deber√≠a cerrarse
    await waitFor(() => {
      expect(screen.queryByText(/¬øest√°s seguro\?/i)).not.toBeInTheDocument();
    });
  });

  it('llama a onDelete cuando se confirma la eliminaci√≥n', async () => {
    render(
      <MainOptionsTable 
        mainOptions={mockMainOptions} 
        onDelete={mockOnDelete} 
      />
    );

    // Abrir di√°logo de eliminaci√≥n
    const deleteButtons = screen.getAllByTitle('Eliminar');
    fireEvent.click(deleteButtons[0]);

    // Confirmar eliminaci√≥n
    const eliminarButtons = screen.getAllByText(/eliminar/i);
    fireEvent.click(eliminarButtons.find(btn => btn.tagName === 'BUTTON')!);

    await waitFor(() => {
      expect(mockOnDelete).toHaveBeenCalledWith(mockMainOptions[0]);
    });

    // El di√°logo deber√≠a cerrarse despu√©s de la eliminaci√≥n
    await waitFor(() => {
      expect(screen.queryByText(/¬øest√°s seguro\?/i)).not.toBeInTheDocument();
    });
  });

  it('trunca descripciones largas correctamente', () => {
    const optionWithLongDescription: MainOption[] = [
      {
        id: 'option-long',
        name: 'Opci√≥n con descripci√≥n larga',
        description: 'Esta es una descripci√≥n extremadamente larga que deber√≠a ser truncada en la tabla para mantener un dise√±o limpio y legible para el usuario final que est√° revisando las opciones principales disponibles en el sistema',
        emoji: 'üìù',
        createdAt: '2023-01-01T00:00:00Z',
      },
    ];

    render(
      <MainOptionsTable 
        mainOptions={optionWithLongDescription} 
        onDelete={mockOnDelete} 
      />
    );

    // La descripci√≥n deber√≠a estar presente pero truncada visualmente por CSS
    expect(screen.getByText(/esta es una descripci√≥n extremadamente larga/i)).toBeInTheDocument();
  });

  it('maneja m√∫ltiples opciones principales con diferentes estados', () => {
    const mixedOptions: MainOption[] = [
      {
        id: 'option-1',
        name: 'Completa',
        description: 'Con todos los campos',
        emoji: '‚úÖ',
        createdAt: '2023-01-01T00:00:00Z',
      },
      {
        id: 'option-2',
        name: 'Sin descripci√≥n',
        emoji: '‚ùå',
        createdAt: '2023-01-02T00:00:00Z',
      },
      {
        id: 'option-3',
        name: 'Sin fecha',
        description: 'Sin createdAt',
        emoji: 'üìÖ',
      },
    ];

    render(
      <MainOptionsTable 
        mainOptions={mixedOptions} 
        onDelete={mockOnDelete} 
      />
    );

    expect(screen.getByText('Completa')).toBeInTheDocument();
    expect(screen.getByText('Con todos los campos')).toBeInTheDocument();
    expect(screen.getByText('Sin descripci√≥n', { selector: 'div' })).toBeInTheDocument(); // El texto "Sin descripci√≥n" por falta de descripci√≥n
    expect(screen.getByText('Sin fecha')).toBeInTheDocument();
    expect(screen.getByText('Fecha no disponible')).toBeInTheDocument();
  });

  it('muestra todos los botones de acci√≥n para cada opci√≥n principal', () => {
    render(
      <MainOptionsTable 
        mainOptions={[mockMainOptions[0]]} 
        onDelete={mockOnDelete} 
      />
    );

    expect(screen.getByTitle('Ver detalles')).toBeInTheDocument();
    expect(screen.getByTitle('Editar')).toBeInTheDocument();
    expect(screen.getByTitle('Eliminar')).toBeInTheDocument();
  });
});
